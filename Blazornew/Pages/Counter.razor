@using Blazornew.Data
@using Blazornew.Services
@inherits OwningComponentBase<MovieService>

@page "/films"

<PageTitle>Films</PageTitle>

<h1>Фильмы</h1>

<div class="input-group">
    <input type="text" class="form-control rounded" placeholder="Search" aria-label="Search"
           aria-describedby="search-addon" @bind="ValueSearch" />
    <button @onclick="() => GetOneFilm()" type="button" class="btn btn-outline-primary">Search</button>
</div>
@ValueSearch

<div style="margin-left: 10px"> @description</div>
<div align="center" class="container">
    @if (searchedMovie != null && FilmOnDisplay)
    {
        <div style="margin-bottom: 40px" class="col col-lg-4">
            <div class="card h-100">
                <img src="@Image"
                 class="card-img-top"
                 style="object-fit:contain; height: 250px">

                <div type="div" class="card-body">
                    <p type="textP" class="card-text" align="left">
                        Name: @searchedMovie.Title
                        Rating: @searchedMovie.Rating <br>
                        <br>
                        Actors:
                        @if (searchedMovie.Actors != null)
                        {
                            @foreach (var actor in searchedMovie.Actors)
                            {
                                <div>
                                    <a @onclick="() => GetMovieFromActor(actor.Name)">@actor.Name</a>
                                </div>
                            }
                        }
                        Tags:
                        @if (searchedMovie.Tags != null)
                        {
                            @foreach (var tag in searchedMovie.Tags)
                            {
                                <div>
                                    <a @onclick="() => GetMovieFromTag(tag.Title)">@tag.Title</a>
                                </div>
                            }
                        }
                    </p>
                </div>
            </div>
        </div>
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
            @foreach (var film in searchedMovie.Tops)
            {
                <div style="margin-bottom: 40px" class="col col-lg-4">
                    <div class="card h-100">
                        <div type="div" class="card-body">
                            <a @onclick="() => GetMoviesAsync(film.Title)">@film.Title</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!FilmOnDisplay)
    {
        <div style="margin-bottom: 40px" class="col col-lg-4">
            <div class="card h-100">
                <img src="@Image"
                 class="card-img-top"
                 style="object-fit:contain; height: 250px">

                @foreach (var film in searchedMovies)
                {
                    <div>
                        <a @onclick="() =>  ActivateGetInfo(film.Title)">@film.Title</a>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    public bool FilmOnDisplay = true;
    public string currentFilmTitle;
    public string ValueSearch;
    public Movie searchedMovie;
    public string FilmId;
    public List<Actor> searchedActors;
    public string Image;
    public string PersonImage;
    public string description;
    public List<Movie> searchedMovies;
    public bool isHasDescription = false;

    public async Task GetOneFilm()
    {
        searchedMovie = Service.GetMovieFromTitle(ValueSearch); //по названию этот метод достает один фильм
        if (searchedMovie == null)
        {
            Image = "https://wonder-day.com/wp-content/uploads/2020/10/wonder-day-among-us-png-29.png";
            ValueSearch = "NOTHING";
            description = string.Empty;
            return;
        }
        if (searchedMovie.Title == currentFilmTitle) return;


        await GetImage(searchedMovie);
        await GetDescription(searchedMovie);
        searchedActors = searchedMovie.Actors.ToList();
        currentFilmTitle = searchedMovie.Title;
    }

    public async Task GetImage(Movie movie)
    {
        var client = new HttpClient();
        var titleName = movie?.Title.Replace(" ", "%20");

        var request = new HttpRequestMessage
{
	Method = HttpMethod.Get,
                RequestUri = new Uri("https://online-movie-database.p.rapidapi.com/auto-complete?q=" + titleName),
                Headers =
	{
		{ "X-RapidAPI-Key", "82a2eb736bmsh70c276f3fe4fb12p1e0ce5jsn764a7ebdd411" },
		{ "X-RapidAPI-Host", "online-movie-database.p.rapidapi.com" },
	},
};
        await GI(request, client);
        await GetDescription(searchedMovie);
    }

    public async Task GetImage(Actor Actor)
    {
        var client = new HttpClient();
        var ActorName = Actor?.Name.Replace(" ", "%20");
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://online-movie-database.p.rapidapi.com/actors/get-all-images?nconst=" + ActorName),
                Headers =
    {
        { "X-RapidAPI-Key", "82a2eb736bmsh70c276f3fe4fb12p1e0ce5jsn764a7ebdd411" },
        { "X-RapidAPI-Host", "online-movie-database.p.rapidapi.com" },
    },
            };
        await GI(request, client);
    }

    public async Task GetDescription(Movie movie)
    {
        isHasDescription = true;
        var client = new HttpClient();
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://online-movie-database.p.rapidapi.com/title/get-plots?tconst=" + FilmId),
                Headers =
    {
        { "X-RapidAPI-Key", "82a2eb736bmsh70c276f3fe4fb12p1e0ce5jsn764a7ebdd411" },
        { "X-RapidAPI-Host", "online-movie-database.p.rapidapi.com" },
    },
            };
        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var responseString = await response.Content.ReadAsStringAsync();
            try
            {
                var des = "";
                des = responseString.Substring(responseString.IndexOf("text") + 7);
                description =des.Substring(0, des.IndexOf(".")+1);

            }
            catch
            {
                description = "описания фильма нет";
            }
        }
    }

    public async Task GI(HttpRequestMessage request, HttpClient client)
    {
        using (var response = client.Send(request))
        {
            var responseString2 = await response.Content.ReadAsStringAsync();
            try
            {
                int startIndex = responseString2.IndexOf("https");
                int endIndex = responseString2.IndexOf("width", startIndex);
                Image = responseString2.Substring(startIndex, (endIndex - startIndex) - 3);
                FilmId = responseString2.Substring(responseString2.IndexOf("id\":\"") + 5, 9);
            }
            catch
            {
                Image = "https://wonder-day.com/wp-content/uploads/2020/10/wonder-day-among-us-png-29.png";
            }
        }
    }

    public async Task GetMoviesAsync(string Name)
    {
        ValueSearch = Name;
        description = String.Empty;
        searchedMovie = Service.GetMovieFromTitle(Name);
        searchedActors = searchedMovie.Actors.ToList();
        await GetImage(searchedMovie);
        await GetDescription(searchedMovie);
    }

    public async Task GetMovieFromTag(string tagName)
    {
        description = string.Empty;
        FilmOnDisplay = false;
        searchedMovies = Service.GetMoviesFromTag(tagName);
    }


    public async Task GetMovieFromActor(string actorFullname)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://online-movie-database.p.rapidapi.com/auto-complete?q=" + actorFullname.Replace(" ", "%20")),
                Headers =
    {
        { "X-RapidAPI-Key", "82a2eb736bmsh70c276f3fe4fb12p1e0ce5jsn764a7ebdd411" },
        { "X-RapidAPI-Host", "online-movie-database.p.rapidapi.com" },
    },
            };
        using (var response = await client.SendAsync(request))
        {
            if (response.IsSuccessStatusCode)
            {
                response.EnsureSuccessStatusCode();
                var body = await response.Content.ReadAsStringAsync();
                var actorId = body.Substring(body.IndexOf("nm"), 9);
                int startIndex = body.IndexOf("https");
                int endIndex = body.IndexOf("width", startIndex);
                Image = body.Substring(startIndex, (endIndex - startIndex) - 3);
            }
        }
        description = string.Empty;
        FilmOnDisplay = false;
        searchedMovies = Service.GetMoviesFromActor(actorFullname);

    }

    public async Task ActivateGetInfo(string movieTitle)
    {
        FilmOnDisplay = true;
        ValueSearch = movieTitle;
        GetOneFilm();
    }

}